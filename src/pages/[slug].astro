---
// TYPES
import type { Post } from '../types/post';

import News from '../templates/News.astro';
import Movie from '../templates/Movie.astro';

import { Image } from 'astro:assets';

import "../styles/content.scss";
import "../styles/breadcrumb.scss";

import { GraphQLClient } from 'graphql-request';
import { ALL_POSTS_QUERY } from '../queries/posts';

import { formatDateToThai } from '../lib/formatDate';

import Layout from '../layouts/Layout.astro';

import Content from '../templates/Content.astro';

import RelatedPosts from '../components/RelatedPosts.astro';

import NextPrevPost from '../components/NextPrevPost.astro';

export async function getStaticPaths() {
    let allPosts : any = [];
    let hasNextPage : boolean = true;
    let afterCursor : any = null;

    while (hasNextPage) { // วนลูปเพื่อดึงข้อมูลบทความทั้งหมด เพราะว่า WpGraphQL แสดงได้สูงสุดแค่ 100 บทความแต่หน้า
        const client = new GraphQLClient('https://assets.onlygroub.com/graphql');
        const data : any = await client.request(ALL_POSTS_QUERY , { after: afterCursor });
        allPosts = allPosts.concat(data.posts.nodes);
        hasNextPage = data.posts.pageInfo.hasNextPage;
        afterCursor = data.posts.pageInfo.endCursor;
    }

    return allPosts.map((post: { slug: string }) => {
        const index = allPosts.indexOf(post);
        const prev = allPosts[index - 1];
        const next = allPosts[index + 1];
        return {
            params: { slug: post.slug },
            props: { post, prev, next },
        };
    });
}
let { post, prev, next }: { post: Post, prev?: Post, next?: Post } = Astro.props;
const relatedPosts = (post as any)?.relatedPosts.nodes;

// The browser should always check freshness
Astro.response.headers.set("cache-control", "public, max-age=0, must-revalidate");

// The CDN should cache for a year, but revalidate if the cache tag changes
Astro.response.headers.set("netlify-cdn-cache-control", "s-maxage=31536000");

const isMovie : boolean = ['thai', 'inter'].includes(post.terms.nodes[0]?.slug);


let postTitle : any;
let structuredData : any;
if (isMovie) {
    
    postTitle = `ดูหนัง ${post.title} เต็มเรื่อง`;
    const randomRatingCount = Math.floor(Math.random() * (8 - 5 + 1) + 5);
    structuredData  = `
    {
        "@context": "https://schema.org",
        "@type": "Movie",
        "name": "${post.title}",
        "director": {
            "@type": "Person",
            "name": "${post.movie.director}"
        },
        "image": "${post.featuredImageMedium.node.sourceUrl}",
        "dateCreated": "${post.date}+07:00",
        "aggregateRating": {
            "@type": "AggregateRating",
            "bestRating": "10",
            "ratingCount": "${randomRatingCount}",
            "ratingValue": "1",
            "reviewCount": "1"
        },
        "trailer": {
            "@type": "VideoObject",
            "name": "ตัวอย่างหนัง ${post.title}",
            "description": "ตัวอย่างหนัง ${post.title} HD",
            "thumbnailUrl": "${post.featuredImageMedium.node.sourceUrl}",
            "uploadDate": "${post.date}+07:00",
            "contentUrl": "https://youtu.be/${post.movie.youtubeId}",
            "embedUrl": "https://www.youtube.com/embed/${post.movie.youtubeId}"
        }
    }`;


    let raw : any = JSON.parse(post.seo.schema.raw);
    // raw['@graph'][0]['@type'] = 'Article'; // เปลี่ยนประเภทเป็น Article
    raw['@graph'].splice(0, 1); // ลบประเภท Article เพื่อใส่ ประเภท Movie
    const structuredData_json : any = JSON.parse(structuredData);
    raw['@graph'].push(structuredData_json);

    post.seo.schema.raw = JSON.stringify(raw);

    // console.log(post.seo.schema.raw);

} else {
    postTitle = post.title;    
}


---
<Layout title={postTitle} seo={post.seo}>
    <Content>
        {isMovie && <Movie post={post} />}
        {!isMovie && <News post={post} />}
        <RelatedPosts relatedPosts={relatedPosts} />
        <NextPrevPost next={next} prev={prev} />
    </Content>
</Layout>
