---
import { GraphQLClient } from 'graphql-request';

import Layout from '../../../layouts/Layout.astro';

import Card from '../../../components/Card.astro';

import { formatDateToThai } from '../../../lib/formatDate';

import '../../../styles/archive.scss';

// ดึงข้อมูลทั้งหมดของ CATEGORY
export async function getStaticPaths() {
    const client = new GraphQLClient('https://assets.onlygroub.com/graphql');

    const POSTS_PER_PAGE = 24;

    const category_Query = `
            query GetCategoriesWithCount {
                categories {
                    nodes {
                        slug
                        count
                    }
                }
            }
    `;
    const dataCategory : any = await client.request(category_Query);
	// สร้าง paths สำหรับแต่ละหน้าและแต่ละหมวดหมู่
    const paths : any = [];
    dataCategory.categories.nodes.forEach((category : any) => {
        const totalPages = Math.ceil(category.count / POSTS_PER_PAGE);
        for (let page = 1; page <= totalPages; page++) {
            if (page != 1) {
                // ไม่ให้เก็บหน้า /category/slug/1
                paths.push({
                    params: { slug: category.slug, page: String(page) },
                });
            }
        }
    });
    return paths;
}



const { slug , page } = Astro.params;
const postPerPage = 24;
let data_allpages : any[] = [];
let hasNextPage : boolean = true;
let endCursor : any = null;
let endCursor_allpages : any[] = [];
let i : number = 1; // สามารถตรวจสอบหน้าสุดท้ายได้จาก i - 1 
const maxLoop : number = 50;

// ดึงข้อมูลโพสต์จากหมวดหมู่ที่เลือก โดยใช้ pagination เพื่อดึงข้อมูลทั้งหมด
while (hasNextPage && i <= page) {
    i++;
    const client = new GraphQLClient('https://assets.onlygroub.com/graphql');
    const posts_Query = `
            query GetCategory {
                categories(where: {slug: "${slug}"}) {
                    nodes {
                        name
                        slug
                        seo {
                            title
                            metaDesc
                        }
                        posts(first: ${postPerPage} , after: "${endCursor}") {
                            pageInfo {
                                hasNextPage
                                endCursor
                            }
                            nodes {
                                title
                                slug
                                date
                                excerpt
                                featuredImageThumbnail: featuredImage {
                                    node {
                                        id
                                        sourceUrl(size: MEDIUM)
                                        altText
                                        srcSet(size: MEDIUM)
                                        sizes(size: MEDIUM)
                                    }
                                }
                            }
                        }
                    }
                }
            }
    `;

    const data : any = await client.request(posts_Query);

    // เพิ่มข้อมูลที่ดึงได้ลงใน data_allpages และ endCursor_allpages
    hasNextPage = data.categories.nodes[0].posts.pageInfo.hasNextPage;
    data_allpages = data_allpages.concat(data);
    endCursor = data.categories.nodes[0].posts.pageInfo.endCursor;
    endCursor_allpages = endCursor_allpages.concat(data.categories.nodes[0].posts.pageInfo.endCursor);
}

// คำนวณค่า indexData เพื่อใช้เลือกข้อมูลโพสต์ในหน้านี้
const indexData : number = parseInt(page) - 1;
const categoryTitle : string = data_allpages[0].categories.nodes[0].name;
const posts : any = data_allpages[indexData].categories.nodes[0].posts.nodes;
const seo : any = data_allpages[indexData].categories.nodes[0].seo;

const structuredData : any = `
{
	"@context": "https://schema.org",
	"@type": "BreadcrumbList",
	"itemListElement": [{
	"@type": "ListItem",
	"position": 1,
	"name": "หน้าแรก",
	"item": "https://onlygroub.com"
	},{
	"@type": "ListItem",
	"position": 2,
	"name": "${categoryTitle}",
	}]
}
`;
---
<Layout title={categoryTitle} seo={seo} structuredData={structuredData}>
	<div class="container">
		<div class="header-section">
            <h1 class="section-title">{categoryTitle}</h1>
		</div>
		<div class="list-posts">
			{
				posts.map((post : any) => {
					return (
						<Card 
							sizes={post.featuredImageThumbnail.node.srcSet} 
							title={post.title} 
							data={post.date} 
							dateFormatted={formatDateToThai(post.date)} 
							imageUrl={post.featuredImageThumbnail.node.sourceUrl} 
							imageAlt={post.featuredImageThumbnail.node.altText} 
							url={post.slug} 
							excerpt={post.excerpt} 
						/>
					);
				})
			}
		</div>
        <div class="flex justify-between gap-4 my-8">
            {page > 2 && ( // page คือหน้าปัจจุบัน & i - 1 คือจำนวนหน้าแยกของหมวดหมู่
            <a 
                href={`/category/${slug}/${Number(page) - 1}`}
                class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 transition-colors text-black"
            >
                ← หน้าก่อนหน้า
            </a>
            )}
            {page == 2 && ( // page คือหน้าปัจจุบัน & i - 1 คือจำนวนหน้าแยกของหมวดหมู่
                <a 
                    href={`/category/${slug}`}
                    class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 transition-colors text-black"
                >
                    ← หน้าก่อนหน้า
                </a>
            )}
            <span class="px-4 py-2">
                หน้า {page}
            </span>
            {hasNextPage && ( // page คือหน้าปัจจุบัน & i - 1 คือจำนวนหน้าแยกของหมวดหมู่
            <a 
                href={`/category/${slug}/${Number(page) + 1}`}
                class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 transition-colors text-black"
            >
                หน้าต่อไป →
            </a>
            )}
        </div>
	</div>
</Layout>
